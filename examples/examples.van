-- Little function to break blocks up
defun pause() as
    println("Press enter to continue");
    input();
end

defun rfib(n) as
    -- Recursive fibonacci
    if(n<=1) then
        return n;
    else
        return rfib(n-1) + rfib(n-2);
    end
end

println("The 8th fibonacci number is " + rfib(8));

defun fib(n) as
    local x = 0;
    local y = 1;
    local z = 0;

    for(local i = 1; i <= n; i += 1) do
        z = x + y;
        x = y;
        y = z;
    end

    return x;
end

println("The 15th fibonacci number is " + fib(15));
pause();

defun fact(n) as
    -- Recursive factorial
    if(n == 0) then
        return 1;
    else
        return n * fact(n-1);
    end
end

println("8! = " + fact(8));
pause();

defun reverse(str) as
    -- Loop through the string backwards
    -- apending to the outstr each index
    local out = "";

    for(local i = len(str) - 1; i >= 0; i -= 1) do
        out += str[i];
    end

    return out;
end

print("Enter a string to be reversed: ");
println(reverse(input()));
pause();

defun slice(list, start, stop) as
    local out = [];
    for(local i = start; i < stop; i+=1) do
        out += list[i];
    end

    return out;
end

println("In python this would be [1,2,3][0:1] => " + str(slice([1,2,3],0,1)));
pause();

defun join(list) as
    local outStr = "";

    for(local i = 0; i < len(list); i+=1) do
        outStr += list[i];
    end

    return outStr;
end

println(str(['T','e','s','t']) + " <= this joined is: " + join(['T','e','s','t']));
pause();


defun fizzbuzz(n) as
    -- Loop from i => n
    for(local i = 1; i <=n; i+=1) do
        -- First check if i is a multiple of
        -- 3 and 5
        if(i % 15 == 0) then
            println("Fizzbuzz");

        -- Then check if i is a multiple of 5
        elif(i%5==0) then
            println("Buzz");

        -- Or a multiple of 3
        elif(i%3==0) then
            println("Fizz");

        -- Otherwhise just print i
        else println(i); end
    end
end

println("Let\'s print out the first 15 fizbuzz numbers:");
fizzbuzz(15);
pause();

defun split(str, delim) as
    -- Temporary string and output array
    local tempStr = "";
    local outArr = [];

    -- Loop through the string
    for(local i = 0; i < len(str); i+=1) do

        -- If the index == the delimiter, 
        -- then add it to the array
        if(str[i] == delim) then
            outArr += tempStr;
            tempStr = "";
        else 
            -- Otherwhise, just add the index
            tempStr += str[i];
        end
    end

    -- Add the last string
    outArr += tempStr;

    -- Return the array
    return outArr;
end

println("Let\'s split the phrase \"Good morning!\" by the letter \'o\': " + str(split("Good morning!","o") ));
println("\t^ Yes this is consistent with the JavaScript implementation of split");
pause();

defun distViz(n, m) as
-- See how n values distribute over m times
    local counts = [];
    local val = 0;

    for(local i = 0; i < n; i += 1) do counts += []; end
    
    for(local i = 0; i < m; i += 1) do
        val = rand() % n;
        counts[val] += "#";
    end

    -- Print out the distribution
    for(local i = 0; i < len(counts); i += 1) do
        if(i < 9) then
            println(i + 1 + " => " + str(counts[i]));
        else
            println(i + 1 + "=> " + str(counts[i]));
        end
    end
end

println("How about seeing how random the RNG is? Here\'s a distribution visualization \nof 15 random numbers between 1 and 10");
distViz(10,15);
pause();

defun massert(condition, msg) as
    if(!condition) then
        println("FAILED ASSERTION: " + msg);
        assert(0);
    end
end

println("And finally, let\'s do an assert!");
massert(1==1, "1 doesn\'t equal 1... apparently");
println("If you\'re seeing this, assert worked! Have a nice day");
pause();